// Add these properties to your existing class
private string _searchText = string.Empty;
public string SearchText
{
    get => _searchText;
    set
    {
        if (SetProperty(ref _searchText, value))
        {
            ApplySearchFilter();
            OnPropertyChanged(nameof(HasSearchResults));
        }
    }
}

public bool HasSearchResults => !string.IsNullOrWhiteSpace(SearchText);

public ObservableCollection<FlagCategory> FilteredCategories { get; } = new ObservableCollection<FlagCategory>();

public ICommand ResetSearchCommand => new RelayCommand(() => SearchText = string.Empty);

private void ApplySearchFilter()
{
    FilteredCategories.Clear();
    
    if (string.IsNullOrWhiteSpace(SearchText))
    {
        // Show all categories
        foreach (var category in FlagCategories)
        {
            FilteredCategories.Add(category);
        }
    }
    else
    {
        // Filter flags and create filtered categories
        var searchTerm = SearchText.ToLowerInvariant();
        
        foreach (var originalCategory in FlagCategories)
        {
            // Find matching flags in this category
            var matchingFlags = originalCategory.Flags
                .Where(f => f.Name.ToLowerInvariant().Contains(searchTerm) || 
                           f.Description.ToLowerInvariant().Contains(searchTerm))
                .ToList();
            
            if (matchingFlags.Any())
            {
                // Create a filtered category with just the matching flags
                var filteredCategory = new FlagCategory
                {
                    Name = originalCategory.Name,
                    Description = originalCategory.Description,
                    IsExpanded = true // Always expand search results
                };
                
                foreach (var flag in matchingFlags)
                {
                    filteredCategory.Flags.Add(flag);
                }
                
                FilteredCategories.Add(filteredCategory);
            }
        }
    }
}

// Initialize filtered categories in constructor
public FastFlagsViewModel()
{
    // Initialize categories
    InitializeCategories();
    
    // Initialize filtered categories
    ApplySearchFilter();
}